<launch>
  <!-- turtlebot3 -->
  <arg name="model" default="$(optenv TURTLEBOT3_MODEL burger)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="x_pos" default="2.0"/>
  <arg name="y_pos" default="0.0"/>
  <arg name="z_pos" default="0.0"/>
  <!-- fetch -->
  <arg name="x" default="0.0" />
  <arg name="y" default="0.0" />
  <arg name="z" default="0.0" />
  <arg name="yaw" default="0.0" />

  <!-- start Gazebo with a blank world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find follow_path_pkg)/worlds/empty.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
   
  </include>

<!-- start Gazebo with populated world. Note: buggy -->
<!--
  <include file="$(find follow_path_pkg)/launch/empty_world.launch">
    <arg name="world_name" value="$(find follow_path_pkg)/gazebo_models_worlds_collection/worlds/office_small.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>
 -->

  <!-- turtlebot3 -->
  <group ns="turtlebot3_$(arg model)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description_pkg)/urdf/turtlebot3_$(arg model).urdf.xacro" />
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
args="-urdf -model turtlebot3_$(arg model) -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />
  </group>

  <!-- fetch -->
  <!-- setup controllers -->
  <rosparam file="$(find follow_path_pkg)/config/default_controllers.yaml" command="load" />
  <!-- URDF and TF support -->
  <group ns="fetch">
    <param name="robot_description" command="$(find xacro)/xacro.py $(find fetch_description_pkg)/robots/fetch.gazebo.xacro" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" >
      <param name="publish_frequency" type="double" value="50.0"/>
      <param name="tf_prefix" value="fetch"/>
    </node>
    <!-- put a robot in gazebo, make it look pretty -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg yaw) -model fetch -param robot_description"/>
  </group>
    <node name="prepare_robot" pkg="fetch_description_pkg" type="prepare_simulated_robot.py" />
    <!-- Give this robot a serial number and version -->
    <param name="robot/serial" value="ABCDEFGHIJKLMNOPQRSTUVWX" />
    <param name="robot/version" value="0.0.1" />
    <!-- Head Camera Pipeline -->
    <include file="$(find fetch_description_pkg)/launch/include/head_camera.launch.xml" />
    <!-- Publish base_scan_raw if anything subscribes to it -->
    <node name="publish_base_scan_raw" pkg="topic_tools" type="relay" args="base_scan base_scan_raw" >
      <param name="lazy" type="bool" value="True"/>
    </node>
    <!-- Start a mux between application and teleop -->
    <node pkg="topic_tools" type="mux" name="cmd_vel_mux" respawn="true" args="base_controller/command /cmd_vel /teleop/cmd_vel">
      <remap from="mux" to="cmd_vel_mux" />
    </node>
  
</launch>
